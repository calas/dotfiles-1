-- Standard awesome library
local gears = require("gears")
local awful = require("awful")
awful.rules = require("awful.rules")
require("awful.autofocus")
-- Widget and layout library
local wibox = require("wibox")
-- Theme handling library
local beautiful = require("beautiful")
-- Notification library
local naughty = require("naughty")
local menubar = require("menubar")
-- Widget library
-- local wicked = require("wicked")
-- http://git.sysphere.org/vicious/tree/README
-- local vicious = require("vicious")

-- {{{ Error handling
-- Check if awesome encountered an error during startup and fell back to
-- another config (This code will only ever execute for the fallback config)
if awesome.startup_errors then
    naughty.notify({ preset = naughty.config.presets.critical,
                     title = "Oops, there were errors during startup!",
                     text = awesome.startup_errors })
end

-- Handle runtime errors after startup
do
    local in_error = false
    awesome.connect_signal("debug::error", function (err)
        -- Make sure we don't go into an endless error loop
        if in_error then return end
        in_error = true

        naughty.notify({ preset = naughty.config.presets.critical,
                         title = "Oops, an error happened!",
                         text = err })
        in_error = false
    end)
end
-- }}}

-- {{{ Variable definitions
-- Themes define colours, icons, and wallpapers
--beautiful.init(os.getenv("HOME") .. "/repos/perso/gwarf/dotfiles/awesome3/.config/awesome/themes/mine.lua")
beautiful.init(os.getenv("HOME") .. "/repos/perso/dotfiles/theme-awesome-solarized-dark.lua")
theme.wallpaper_cmd = { "awsetbg -f  " .. os.getenv("HOME") .. "/Images/wallpaper/tjZzK.jpg" }

-- This is used later as the default terminal and editor to run.
terminal = "roxterm"
editor = os.getenv("EDITOR") or "vim"
editor_cmd = terminal .. " -x " .. editor

-- Default modkey.
-- Usually, Mod4 is the key with a logo between Control and Alt.
-- If you do not like this or do not have such a key,
-- I suggest you to remap Mod4 to another key using xmodmap or other tools.
-- However, you can use another modifier like Mod1, but it may interact with others.
modkey = "Mod4"

-- Table of layouts to cover with awful.layout.inc, order matters.
local layouts =
{
    awful.layout.suit.floating,
    awful.layout.suit.tile,
    awful.layout.suit.tile.left,
    awful.layout.suit.tile.bottom,
    awful.layout.suit.tile.top,
    awful.layout.suit.fair,
    awful.layout.suit.fair.horizontal,
    awful.layout.suit.spiral,
    awful.layout.suit.spiral.dwindle,
    awful.layout.suit.max,
    awful.layout.suit.max.fullscreen,
    awful.layout.suit.magnifier
}
-- }}}

-- {{{ Wallpaper
if beautiful.wallpaper then
    for s = 1, screen.count() do
        gears.wallpaper.maximized(beautiful.wallpaper, s, true)
    end
end
-- }}}

-- {{{ Tags
-- Define a tag table which hold all screen tags.
tags = {}
tags[1] = awful.tag({ "terms", "web", "revelation", "files", "virt", "other" }, 1, { layouts[2], layouts[2], layouts[2], layouts[1], layouts[2], layouts[2] })
-- }}}

-- {{{ Menu
-- Create a laucher widget and a main menu
myawesomemenu = {
   { "manual", terminal .. " -e man awesome" },
   { "edit config", editor_cmd .. " " .. awesome.conffile },
   { "restart", awesome.restart },
   { "quit", awesome.quit }
}

mymainmenu = awful.menu({ items = { { "awesome", myawesomemenu, beautiful.awesome_icon },
                                    { "open terminal", terminal },
                                    { "vimprobable", '$(tabbed -d >/tmp/tabbed.xid); vimprobable2 -e $(</tmp/tabbed.xid)' }
                                  }
                        })

mylauncher = awful.widget.launcher({ image = beautiful.awesome_icon,
                                     menu = mymainmenu })
-- }}}

-- {{{ Pulseaudio volume widget
-- volumewidget = widget({type = "textbox", name = "volumewidget", align = "right"})
-- volumewidget:buttons(awful.util.table.join(
-- awful.button({ }, 1, function () volumeMute() end),
--  awful.button({ }, 4, function () volumeUp() end),
--  awful.button({ }, 5, function () volumeDown() end)
-- ))
-- function volumeUp()
--   local step = 655
--   local f = io.popen("pacmd dump |grep set-sink-volume")
--   local v = f:read()
--   local volume = tonumber(string.sub(v, string.find(v, 'x') - 1))
--   local newVolume = volume + step
--   if newVolume > 65536 then
--     newVolume = 65536
--   end
--   io.popen("pacmd set-sink-volume 0 "..newVolume)
--   volumeInfo()
--   f:close()
-- end
-- function volumeDown()
--   local step = 655
--   local f = io.popen("pacmd dump |grep set-sink-volume")
--   local v = f:read()
--   local volume = tonumber(string.sub(v, string.find(v, 'x') - 1))
--   local newVolume = volume - step
--   if newVolume < 0 then
--     newVolume = 0
--   end
--   io.popen("pacmd set-sink-volume 0 "..newVolume)
--   volumeInfo()
--   f:close()
-- end
-- function volumeMute()
--   local g = io.popen("pacmd dump |grep set-sink-mute")
--   local mute = g:read()
--   if string.find(mute, "no") then
--     io.popen("pacmd set-sink-mute 0 yes")
--   else
--     io.popen("pacmd set-sink-mute 0 no")
--   end
--   volumeInfo()
--   g:close()
-- end
-- function volumeInfo()
--   volmin = 0
--   volmax = 65536
--   local f = io.popen("pacmd dump |grep set-sink-volume")
--   local g = io.popen("pacmd dump |grep set-sink-mute")
--   local v = f:read()
--   local mute = g:read()
--   if string.find(mute, "no") then
--     volume = math.floor(tonumber(string.sub(v, string.find(v, 'x')-1)) * 100 / volmax).." %"
--   else
--     volume = "✕"
--   end
--   volumewidget.text = " ♫ "..volume.." "
--   f:close()
--   g:close()
-- end
-- }}}

-- {{{ Pulseaudio volume widget hook
-- volumeInfo()
-- awful.hooks.timer.register(5, function()
--   volumeInfo()
-- end)
-- }}}

-- {{{ setFg: put colored span tags around a text, useful for wiboxes
function setFg(fg,s)
    return "<span color=\"" .. fg .. "\">" .. s .."</span>"
end
-- }}}

-- {{{ Awesomempd
-- http://awesome.naquadah.org/wiki/Awesompd_widget
-- git clone https://github.com/alexander-yakushev/awesompd.git 
-- cd awesompd
-- git co -b for-awesome-git origin/for-awesome-git
-- cd ~/.config/awesome
-- ln -s ~/repos/perso/awesompd
local awesompd = require("awesompd/awesompd")
musicwidget = awesompd:create() -- Create awesompd widget
musicwidget.font = "Liberation Mono" -- Set widget font
musicwidget.scrolling = true -- If true, the text in the widget will be scrolled
musicwidget.output_size = 30 -- Set the size of widget in symbols
musicwidget.update_interval = 10 -- Set the update interval in seconds
-- Set the folder where icons are located (change username to your login name)
musicwidget.path_to_icons = "/home/baptiste/.config/awesome/awesompd/icons"
-- Set the default music format for Jamendo streams. You can change
-- this option on the fly in awesompd itself.
-- possible formats: awesompd.FORMAT_MP3, awesompd.FORMAT_OGG
musicwidget.jamendo_format = awesompd.FORMAT_MP3
-- If true, song notifications for Jamendo tracks and local tracks will also contain
-- album cover image.
musicwidget.show_album_cover = true
-- Specify how big in pixels should an album cover be. Maximum value
-- is 100.
musicwidget.album_cover_size = 50
-- This option is necessary if you want the album covers to be shown
-- for your local tracks.
musicwidget.mpd_config = "/home/baptiste/.mpdconf"
-- Specify the browser you use so awesompd can open links from
-- Jamendo in it.
musicwidget.browser = "firefox"
-- Specify decorators on the left and the right side of the
-- widget. Or just leave empty strings if you decorate the widget
-- from outside.
musicwidget.ldecorator = " "
musicwidget.rdecorator = " "
-- Set all the servers to work with (here can be any servers you use)
musicwidget.servers = {
   { server = "toglut@localhost",
     port = 6600 },
}
-- Set the buttons of the widget
musicwidget:register_buttons({ { "", awesompd.MOUSE_LEFT, musicwidget:command_toggle() },
                   { "Control", awesompd.MOUSE_SCROLL_UP, musicwidget:command_prev_track() },
             { "Control", awesompd.MOUSE_SCROLL_DOWN, musicwidget:command_next_track() },
             { "", awesompd.MOUSE_SCROLL_UP, musicwidget:command_volume_up() },
             { "", awesompd.MOUSE_SCROLL_DOWN, musicwidget:command_volume_down() },
             { "", awesompd.MOUSE_RIGHT, musicwidget:command_show_menu() },
                               { "", "XF86AudioLowerVolume", musicwidget:command_volume_down() },
                               { "", "XF86AudioRaiseVolume", musicwidget:command_volume_up() },
                               { modkey, "Pause", musicwidget:command_playpause() } })
musicwidget:run() -- After all configuration is done, run the widget
-- })

-- Disabled for 3.5 update
-- wicked.register(mpdwidget, wicked.widgets.mpd, function (widget, args)
--     local state = mpc_status()
--     if state == "stopped" then
--         return setFg("#808080", "No zic!?")
--     elseif state == "paused" then
--         return setFg("#808080", args[1]) .. " "
--     else
--         return '<span color="white">♫ </span>' .. args[1] .. " "
--     end
-- end)

local mpdbuttons = {
    button({}, 1, function () awful.util.spawn("mpc --no-status toggle") end),
    button({}, 2, function () if tags[mouse.screen][4] then awful.tag.viewonly(tags[mouse.screen][4]) end end),
    button({}, 3, launch_ncmpcpp),
    button({}, 4, function () awful.util.spawn("mpc --no-status prev") end),
    button({}, 5, function () awful.util.spawn("mpc --no-status next") end)
}

-- Menubar configuration
menubar.utils.terminal = terminal -- Set the terminal for applications that require it
-- }}}

-- {{{ Wibox
-- Create a textclock widget
mytextclock = awful.widget.textclock()

-- Create a wibox for each screen and add it
mywibox = {}
mypromptbox = {}
mylayoutbox = {}
mytaglist = {}
mytaglist.buttons = awful.util.table.join(
                    awful.button({ }, 1, awful.tag.viewonly),
                    awful.button({ modkey }, 1, awful.client.movetotag),
                    awful.button({ }, 3, awful.tag.viewtoggle),
                    awful.button({ modkey }, 3, awful.client.toggletag),
                    awful.button({ }, 4, function(t) awful.tag.viewnext(awful.tag.getscreen(t)) end),
                    awful.button({ }, 5, function(t) awful.tag.viewprev(awful.tag.getscreen(t)) end)
                    )
mytasklist = {}
mytasklist.buttons = awful.util.table.join(
                     awful.button({ }, 1, function (c)
                                              if c == client.focus then
                                                  c.minimized = true
                                              else
                                                  -- Without this, the following
                                                  -- :isvisible() makes no sense
                                                  c.minimized = false
                                                  if not c:isvisible() then
                                                      awful.tag.viewonly(c:tags()[1])
                                                  end
                                                  -- This will also un-minimize
                                                  -- the client, if needed
                                                  client.focus = c
                                                  c:raise()
                                              end
                                          end),
                     awful.button({ }, 3, function ()
                                              if instance then
                                                  instance:hide()
                                                  instance = nil
                                              else
                                                  instance = awful.menu.clients({ width=250 })
                                              end
                                          end),
                     awful.button({ }, 4, function ()
                                              awful.client.focus.byidx(1)
                                              if client.focus then client.focus:raise() end
                                          end),
                     awful.button({ }, 5, function ()
                                              awful.client.focus.byidx(-1)
                                              if client.focus then client.focus:raise() end
                                          end))

for s = 1, screen.count() do
    -- Create a promptbox for each screen
    mypromptbox[s] = awful.widget.prompt()
    -- Create an imagebox widget which will contains an icon indicating which layout we're using.
    -- We need one layoutbox per screen.
    mylayoutbox[s] = awful.widget.layoutbox(s)
    mylayoutbox[s]:buttons(awful.util.table.join(
                           awful.button({ }, 1, function () awful.layout.inc(layouts, 1) end),
                           awful.button({ }, 3, function () awful.layout.inc(layouts, -1) end),
                           awful.button({ }, 4, function () awful.layout.inc(layouts, 1) end),
                           awful.button({ }, 5, function () awful.layout.inc(layouts, -1) end)))
    -- Create a taglist widget
    mytaglist[s] = awful.widget.taglist(s, awful.widget.taglist.filter.all, mytaglist.buttons)

    -- Create a tasklist widget
    mytasklist[s] = awful.widget.tasklist(s, awful.widget.tasklist.filter.currenttags, mytasklist.buttons)

    -- Create the wibox
    mywibox[s] = awful.wibox({ position = "top", screen = s })

    -- Widgets that are aligned to the left
    local left_layout = wibox.layout.fixed.horizontal()
    left_layout:add(mylauncher)
    left_layout:add(mytaglist[s])
    left_layout:add(mypromptbox[s])

    -- Widgets that are aligned to the right
    local right_layout = wibox.layout.fixed.horizontal()
    if s == 1 then right_layout:add(wibox.widget.systray()) end
    right_layout:add(mytextclock)
    right_layout:add(mylayoutbox[s])
    right_layout:add(musicwidget.widget)
--  right_layout:add(volumewidget),
--  right_layout:add(mpdwidget),

    -- Now bring it all together (with the tasklist in the middle)
    local layout = wibox.layout.align.horizontal()
    layout:set_left(left_layout)
    layout:set_middle(mytasklist[s])
    layout:set_right(right_layout)

    mywibox[s]:set_widget(layout)
end
-- }}}

-- {{{ Mouse bindings
root.buttons(awful.util.table.join(
    awful.button({ }, 3, function () mymainmenu:toggle() end),
    awful.button({ }, 4, awful.tag.viewnext),
    awful.button({ }, 5, awful.tag.viewprev)
))
-- }}}

-- {{{ Key bindings
globalkeys = awful.util.table.join(
    awful.key({ modkey,           }, "Left",   awful.tag.viewprev       ),
    awful.key({ modkey,           }, "Right",  awful.tag.viewnext       ),
    awful.key({ modkey,           }, "Escape", awful.tag.history.restore),

    awful.key({ modkey,           }, "j",
        function ()
            awful.client.focus.byidx( 1)
            if client.focus then client.focus:raise() end
        end),
    awful.key({ modkey,           }, "k",
        function ()
            awful.client.focus.byidx(-1)
            if client.focus then client.focus:raise() end
        end),
    awful.key({ modkey,           }, "w", function () mymainmenu:show() end),

    -- Layout manipulation
    awful.key({ modkey, "Shift"   }, "j", function () awful.client.swap.byidx(  1)    end),
    awful.key({ modkey, "Shift"   }, "k", function () awful.client.swap.byidx( -1)    end),
    awful.key({ modkey, "Control" }, "j", function () awful.screen.focus_relative( 1) end),
    awful.key({ modkey, "Control" }, "k", function () awful.screen.focus_relative(-1) end),
    awful.key({ modkey,           }, "u", awful.client.urgent.jumpto),
    awful.key({ modkey,           }, "Tab",
        function ()
            awful.client.focus.history.previous()
            if client.focus then
                client.focus:raise()
            end
        end),

    -- Standard program
    awful.key({ modkey,           }, "Return", function () awful.util.spawn(terminal) end),
    awful.key({ modkey, "Control" }, "r", awesome.restart),
    awful.key({ modkey, "Shift"   }, "q", awesome.quit),

    awful.key({ modkey,           }, "l",     function () awful.tag.incmwfact( 0.05)    end),
    awful.key({ modkey,           }, "h",     function () awful.tag.incmwfact(-0.05)    end),
    awful.key({ modkey, "Shift"   }, "h",     function () awful.tag.incnmaster( 1)      end),
    awful.key({ modkey, "Shift"   }, "l",     function () awful.tag.incnmaster(-1)      end),
    awful.key({ modkey, "Control" }, "h",     function () awful.tag.incncol( 1)         end),
    awful.key({ modkey, "Control" }, "l",     function () awful.tag.incncol(-1)         end),
    awful.key({ modkey,           }, "space", function () awful.layout.inc(layouts,  1) end),
    awful.key({ modkey, "Shift"   }, "space", function () awful.layout.inc(layouts, -1) end),

    awful.key({ modkey, "Control" }, "n", awful.client.restore),

    -- Prompt
    awful.key({ modkey },            "r",     function () mypromptbox[mouse.screen]:run() end),

    awful.key({ modkey }, "x",
              function ()
                  awful.prompt.run({ prompt = "Run Lua code: " },
                  mypromptbox[mouse.screen].widget,
                  awful.util.eval, nil,
                  awful.util.getdir("cache") .. "/history_eval")
              end),
    -- Menubar
    awful.key({ modkey }, "p", function() menubar.show() end),

    -- Locking
    awful.key({ modkey }, "F12", function () awful.util.spawn("xlock") end),

    -- Calendar
    awful.key({ modkey }, "F10", function () awful.util.spawn_with_shell("cal -m | xmessage -timeout 10 -file -") end),

    -- Application switcher
    awful.key({ "Mod1" }, "Tab", function ()
            -- If you want to always position the menu on the same place set coordinates
            awful.menu.menu_keys.down = { "Down", "Alt_L" }
            local cmenu = awful.menu.clients({width=245}, { keygrabber=true, coords={x=525, y=330} })
    end)

    -- Window properties
    -- Commented for update to 3.5
--     awful.key({ modkey, "Control" }, "i",
--         function ()
--           local s = mouse.screen
--           if mypromptbox[s].text then
--             mypromptbox[s].text = nil
--           elseif client.focus then
--             mypromptbox[s].text = nil
--             if client.focus.class then
--               mypromptbox[s].text = "Class: " .. client.focus.class .. " "
--             end
--             if client.focus.instance then
--               mypromptbox[s].text = mypromptbox[s].text .. "Instance: ".. client.focus.instance .. " "
--             end
--             if client.focus.role then
--               mypromptbox[s].text = mypromptbox[s].text .. "Role: ".. client.focus.role
--             end
--           end
--           end)
)

clientkeys = awful.util.table.join(
    awful.key({ modkey,           }, "f",      function (c) c.fullscreen = not c.fullscreen  end),
    awful.key({ modkey, "Shift"   }, "c",      function (c) c:kill()                         end),
    awful.key({ modkey, "Control" }, "space",  awful.client.floating.toggle                     ),
    awful.key({ modkey, "Control" }, "Return", function (c) c:swap(awful.client.getmaster()) end),
    awful.key({ modkey,           }, "o",      awful.client.movetoscreen                        ),
    awful.key({ modkey,           }, "t",      function (c) c.ontop = not c.ontop            end),
    awful.key({ modkey,           }, "n",
        function (c)
            -- The client currently has the input focus, so it cannot be
            -- minimized, since minimized clients can't have the focus.
            c.minimized = true
        end),
    awful.key({ modkey,           }, "m",
        function (c)
            c.maximized_horizontal = not c.maximized_horizontal
            c.maximized_vertical   = not c.maximized_vertical
        end)
)

-- Compute the maximum number of digit we need, limited to 9
keynumber = 0
for s = 1, screen.count() do
   keynumber = math.min(9, math.max(#tags[s], keynumber))
end

-- Bind all key numbers to tags.
-- Be careful: we use keycodes to make it works on any keyboard layout.
-- This should map on the top row of your keyboard, usually 1 to 9.
for i = 1, keynumber do
    globalkeys = awful.util.table.join(globalkeys,
        awful.key({ modkey }, "#" .. i + 9,
                  function ()
                        local screen = mouse.screen
                        local tag = awful.tag.gettags(screen)[i]
                        if tag then
                           awful.tag.viewonly(tag)
                        end
                  end),
        awful.key({ modkey, "Control" }, "#" .. i + 9,
                  function ()
                      local screen = mouse.screen
                      local tag = awful.tag.gettags(screen)[i]
                      if tag then
                         awful.tag.viewtoggle(tag)
                      end
                  end),
        awful.key({ modkey, "Shift" }, "#" .. i + 9,
                  function ()
                      local tag = awful.tag.gettags(client.focus.screen)[i]
                      if client.focus and tag then
                          awful.client.movetotag(tag)
                     end
                  end),
        awful.key({ modkey, "Control", "Shift" }, "#" .. i + 9,
                  function ()
                      local tag = awful.tag.gettags(client.focus.screen)[i]
                      if client.focus and tag then
                          awful.client.toggletag(tag)
                      end
                  end))
end

-- {{{ MPD control
-- Disable for 3.5 update
-- table.insert(globalkeys, key({ modkey }, "F1",     function()
--         local msg
--         local state = mpc_status()
--         if state == "stopped" then
--                 msg = "stopped"
--         elseif state == "paused" then
--                 msg = "paused"
--         else
--                 msg = mpc_get_song()
--         end
--         if mpd_notify then naughty.destroy(mpd_notify) end
--         mpd_notify = naughty.notify({ title = "mpd", text = msg, width = 400, ontop = false })
-- end))

-- table.insert(globalkeys, key({ modkey }, "F2",     function()
-- local msg = awful.util.escape(execute_command("mpc playlist | grep -C10 '^>'", true))
-- if mpd_notify then naughty.destroy(mpd_notify) end
-- mpd_notify = naughty.notify({ title = "mpd Playlist", text = "<tt>" .. msg .. "</tt>", width = 600 })
-- end))
--
-- table.insert(globalkeys, key({ modkey }, "F5",     function() mpc_command("prev") end))
-- table.insert(globalkeys, key({ modkey }, "F6",     function() mpc_command("toggle") end))
-- table.insert(globalkeys, key({ modkey }, "F7",     function() mpc_command("stop") end))
-- table.insert(globalkeys, key({ modkey }, "F8",     function() mpc_command("next") end))
--
-- table.insert(globalkeys, key({ modkey }, "F11",
-- function()
--  awful.util.spawn('mpc play --no-status `mpc playlist | dmenu'
--      .. ' -fn "' .. beautiful.dmenu_font
--      .. '" -nb "' .. beautiful.dmenu_bg
--      .. '" -nf "' .. beautiful.dmenu_fg
--      .. '" -sb "' .. beautiful.dmenu_sel_bg
--      .. '" -sf "' .. beautiful.dmenu_sel_fg
--      .. '" -i -p "mpd jump to song:" | cut -d")" -f1`')
-- end))
-- }}}

clientbuttons = awful.util.table.join(
    awful.button({ }, 1, function (c) client.focus = c; c:raise() end),
    awful.button({ modkey }, 1, awful.mouse.client.move),
    awful.button({ modkey }, 3, awful.mouse.client.resize))

-- Set keys
musicwidget:append_global_keys()
root.keys(globalkeys)
-- }}}

-- {{{ Rules
awful.rules.rules = {
    -- All clients will match this rule.
    { rule = { },
      properties = { border_width = beautiful.border_width,
                     border_color = beautiful.border_normal,
                     focus = awful.client.focus.filter,
                     keys = clientkeys,
                     buttons = clientbuttons } },
    { rule = { class = "MPlayer" },
      properties = { floating = true } },
    { rule = { class = "Pcmanfm" },
      properties = { floating = true } },
    { rule = { class = "pinentry" },
      properties = { floating = true } },
    { rule = { class = "gimp" },
      properties = { floating = true } },
    { rule = { class = "Tomboy" },
      properties = { floating = true } },
    { rule = { class = "qemu-system-x86_64" },
      properties = { floating = true,
                     tag = tags[1][2] } },
    { rule = { class = "workrave" },
      properties = { floating = true } },
    { rule = { class = "Pavucontrol" },
      properties = { floating = true } },
    { rule = { class = "Terminator" },
      properties = { floating = false,
                     tag = tags[1][1] } },
    { rule_any = { class = { "Pidgin" },
                   name = { "Buddy List" } ,
                   role = { "buddy_list" } },
      properties = { floating = false,
                     tag = tags[1][2] },
      callback = awful.client.setslave },
    { rule = { class = "Pidgin",
               name = "SSL Certificate Verification" },
      properties = { floating = true,
                     tag = tags[1][2] } },
    { rule = { class = "Pidgin",
               name = "New Mail" },
      properties = { floating = true,
                     tag = tags[1][2] } },
    { rule = { class = "Pidgin",
               name = "Preferences" },
      properties = { floating = true,
                     tag = tags[1][2] } },
    { rule = { class = "Pidgin",
               name = "Plug-ins" },
      properties = { floating = true,
                     tag = tags[1][2] } },
    { rule = { class = "Pidgin",
               role = "plugin_config" },
      properties = { floating = true,
                     tag = tags[1][2] } },
    { rule = { class = "Chromium", },
      properties = { floating = false,
                     tag = tags[1][2] } },
    { rule = { class = "Firefox" },
      properties = { floating = false,
                     tag = tags[1][2] } },
    { rule_any = { name = { "User Identification Request",
                            "Xmarks: Status",
                            "Firefox Update",
                            "Add Security Exception",
                            "Session Manager - Mozilla Firefox"} },
      properties = { floating = true,
                     tag = tags[1][2] } },
    { rule = { class = "Firefox", instance = "Dialog" },
      properties = { floating = true },
      callback = function(c)
              awful.client.movetotag(tags[mouse.screen][awful.tag.getidx()], c)
      end },
    { rule_any = { class = { "Revelation", "revelation"} },
      properties = { tag = tags[1][3] } },
    { rule = { class = "Skype" },
      properties = { tag = tags[1][4] } },
    { rule = { class = "Deluge" },
      properties = { tag = tags[1][4] } },
    { rule_any = { class = { "jd-Main", "JDownloader" } },
      properties = { tag = tags[1][4] } },
    { rule = { class = "jdMain",
               instance = "sun-awt-X11-XDialogPeer" },
      properties = { floating = true },
      callback = function(c)
              awful.client.movetotag(tags[mouse.screen][awful.tag.getidx()], c)
      end },
    { rule = { class = "tabbed" },
      properties = { tag = tags[1][6] } },
}
-- }}}

-- {{{ Signals
-- Signal function to execute when a new client appears.
client.connect_signal("manage", function (c, startup)
    -- Enable sloppy focus
    c:connect_signal("mouse::enter", function(c)
        if awful.layout.get(c.screen) ~= awful.layout.suit.magnifier
            and awful.client.focus.filter(c) then
            client.focus = c
        end
    end)

    if not startup then
        -- Set the windows at the slave,
        -- i.e. put it at the end of others instead of setting it master.
        -- awful.client.setslave(c)

        -- Put windows in a smart way, only if they does not set an initial position.
        if not c.size_hints.user_position and not c.size_hints.program_position then
            awful.placement.no_overlap(c)
            awful.placement.no_offscreen(c)
        end
    end

    local titlebars_enabled = false
    if titlebars_enabled and (c.type == "normal" or c.type == "dialog") then
        -- buttons for the titlebar
        local buttons = awful.util.table.join(
                awful.button({ }, 1, function()
                    client.focus = c
                    c:raise()
                    awful.mouse.client.move(c)
                end),
                awful.button({ }, 3, function()
                    client.focus = c
                    c:raise()
                    awful.mouse.client.resize(c)
                end)
                )

        -- Widgets that are aligned to the left
        local left_layout = wibox.layout.fixed.horizontal()
        left_layout:add(awful.titlebar.widget.iconwidget(c))
        left_layout:buttons(buttons)

        -- Widgets that are aligned to the right
        local right_layout = wibox.layout.fixed.horizontal()
        right_layout:add(awful.titlebar.widget.floatingbutton(c))
        right_layout:add(awful.titlebar.widget.maximizedbutton(c))
        right_layout:add(awful.titlebar.widget.stickybutton(c))
        right_layout:add(awful.titlebar.widget.ontopbutton(c))
        right_layout:add(awful.titlebar.widget.closebutton(c))

        -- The title goes in the middle
        local middle_layout = wibox.layout.flex.horizontal()
        local title = awful.titlebar.widget.titlewidget(c)
        title:set_align("center")
        middle_layout:add(title)
        middle_layout:buttons(buttons)

        -- Now bring it all together
        local layout = wibox.layout.align.horizontal()
        layout:set_left(left_layout)
        layout:set_right(right_layout)
        layout:set_middle(middle_layout)

        awful.titlebar(c):set_widget(layout)
    end
end)

client.connect_signal("focus", function(c) c.border_color = beautiful.border_focus end)
client.connect_signal("unfocus", function(c) c.border_color = beautiful.border_normal end)
-- }}}

-- {{{ Custom functions
function run_once(prg,arg_string,pname,screen)
    if not prg then
        do return nil end
    end

    if not pname then
       pname = prg
    end

    if not screen then
       screen = 1
    end

    if not arg_string then
        awful.util.spawn_with_shell("pgrep -f -u $USER -x '" .. pname .. "' || (" .. prg .. ")",screen)
    else
        awful.util.spawn_with_shell("pgrep -f -u $USER -x '" .. pname .. "' || (" .. prg .. " " .. arg_string .. ")",screen)
    end
end
-- }}}

-- {{{ Autostart
run_once("pulseaudio", "-D")
run_once("mpd")
run_once("udiskie")
run_once("roxterm")
run_once("offlineimap", nil, "/usr/bin/python.*/bin/offlineimap")
--run_once("terminator", nil, "/usr/bin/python.*/bin/terminator.*")
run_once("revelation", "~/repos/perso/gwarf/private/revelation/keyring-perso", "/usr/bin/python.*/bin/revelation.*/keyring-perso")
run_once("revelation", "~/repos/perso/gwarf/private/revelation/keyring-maatg", "/usr/bin/python.*/bin/revelation.*/keyring-maatg")
run_once("firefox")
-- run_once("deluge")
run_once("jdownloader")
-- run_once("pidgin")
-- run_once("tomboy")
run_once("nitrogen", "--restore")
-- run_once("gnome-volume-manager")
-- run_once("~/bin/gnome-keyring-launcher")
-- }}}

-- {{{ Autoscript awesome
-- Resize firefox tag columns
awful.tag.setmwfact(0.7, tags[1][2])
-- }}}

-- vim: set ft=lua et ts=2 ts=2:
