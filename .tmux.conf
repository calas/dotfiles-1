# Use vi bindings
setw -g mode-keys vi
set-option -g status-keys vi

# Allow nested tmux sessions by making "C-b b" possible for sending a control
# sequence to a nested session
bind-key b send-prefix

set-window-option -g mouse off

# colors
set -g default-terminal "screen-256color"

## unicode
#setw -g utf8 on
#set -g status-utf8 on

## History limit
set -g history-limit 50000

# tmux messages are displayed for 4 seconds
set -g display-time 4000

# refresh 'status-left' and 'status-right' more often
set -g status-interval 5

# reload
bind-key R respawn-window

# Start Window Numbering at 1
set -g base-index 1

## Copy mode
# http://jasonwryan.com/blog/2011/06/07/copy-and-paste-in-tmux/
#
# Copying between tmux frames
#
# ctrl-b Escape - enter copy mode
# move cursor to the start or end of the desired text string
# v - to activate highlighting
# move cursor to cover the requisite string
# y - to copy
# q - to exit copy mode
# ctrl-b m - to paste
unbind [
# Enter copy mode
bind Escape copy-mode
# Select text
bind-key -t vi-copy 'v' begin-selection
# Vertical selection
bind-key -t vi-copy 'r' rectangle-toggle
# Copy text to buffer
bind-key -t vi-copy 'y' copy-selection
# move tmux copy buffer into x clipboard
bind C-y run "tmux save-buffer - | xclip -i -selection clipboard"
# Paste buffer
# XXX p would be better, butdisabled as it breaks navigating windows
unbind P
bind P paste-buffer
# move x clipboard into tmux paste buffer
bind C-p run "xclip -o | tmux load-buffer -"

# URL view
bind-key u capture-pane \; save-buffer /tmp/tmux-buffer \; new-window -n "urlview" '$SHELL -c "urlview < /tmp/tmux-buffer"'

# Bind horizontal and vertical splits to more memorable sequences
#unbind-key %
#unbind-key '"'
bind-key | split-window -h
bind-key - split-window -v

# easier and faster switching between next/prev window
bind C-p previous-window
bind C-n next-window

# Panes
bind up resize-pane -U 5
bind down resize-pane -D 5
bind left resize-pane -L 5
bind right resize-pane -R 5
unbind space
bind tab next-layout
unbind C-o
bind r rotate-window
bind-key C-a last-window

# quick pane cycling
unbind ^L
bind ^L select-pane -t :.+

# Add vim-like navigation bindings
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# pane movement
bind-key @ command-prompt -p "create pane from:"  "join-pane -s '%%'"
bind-key s command-prompt -p "send pane to:"  "join-pane -t '%%'"

# window movement / renumbering like in screen's :number
bind-key m command-prompt -p "move window to:"  "swap-window -t '%%'"
bind-key . command-prompt "move-window -r -t '%%'"

# mpd control
#bind -n F1 run-shell 'mpc toggle >/dev/null 2>&1'
#bind -n F2 run-shell 'mpc'
#bind -n F3 run-shell 'mpc prev >/dev/null 2>&1'
#bind -n F4 run-shell 'mpc next >/dev/null 2>&1'
#bind -n F5 run-shell 'mpc volume -5 >/dev/null 2>&1'
#bind -n F6 run-shell 'mpc volume +5 >/dev/null 2>&1'

# Change status bar colors
#set-option -g status on
#set-option -g status-position "top"
#set-option -g status-utf8 on
#set-option -g status-justify "left"
#set-option -g status-left-length 60
#set-option -g status-right-length 100

#set -g status-fg white
#set -g status-bg black
#set -g status-right-fg blue
#set-window-option -g window-status-fg green
#set-window-option -g window-status-bg black
#set-window-option -g window-status-current-fg black
#set-window-option -g window-status-current-bg green

#set-option -g mouse-select-pane off
#set-option -g pane-active-border-fg black
#set-option -g pane-active-border-bg cyan
#set-option -g pane-border-fg white
#set-option -g pane-border-bg black

# change foreground-background for the current window
#setw -g window-status-current-attr reverse
setw -g monitor-activity off

# highlight status bar on activity
set -g visual-activity off

# Don't wait for escape sequences
# Fix delay when switching modes in vim
set -sg escape-time 0

# Window status format (default: '#I:#W#F')
set-window-option -g window-status-format ' #I:#W '
set-window-option -g window-status-current-format ' #I:#W '

# Use zsh (login shell)
set -g default-command '/bin/zsh -l'

# Disable automatic changes of titles
set -g set-titles off
set-window-option -g automatic-rename off
set-window-option -g allow-rename off
set -g renumber-windows on

# https://powerline.readthedocs.org/en/latest/overview.html#usage
#source "/home/baptiste/.config/powerline/tmux/powerline.conf"
if-shell "test -f /home/baptiste/.tmux/tmuxline.sh" "source /home/baptiste/.tmux/tmuxline.sh"

set-option -g status-position "top"

# List of plugins
# prefix+I to install
# Supports `github_username/repo` or full git URLs
set -g @tpm_plugins "              \
  tmux-plugins/tpm                 \
  tmux-plugins/tmux-resurrect      \
  tmux-plugins/tmux-sessionist     \
  tmux-plugins/tmux-yank           \
  tmux-plugins/tmux-logging        \
  tmux-plugins/tmux-sensible       \
"
set -g @almost-sensible 'off'
# Other examples:
# github_username/plugin_name    \
# git@github.com/user/plugin     \
# git@bitbucket.com/user/plugin  \

# initializes TMUX plugin manager
run-shell ~/.tmux/plugins/tpm/tpm

# Tmux resurect
# Restore more programms
#set -g @resurrect-processes 'ssh mutt psql mysql sqlite3'
#set -g @resurrect-processes '"sudo journalctl -fxn"'
#set -g @resurrect-processes '"mutt -f =gnubila/INBOX" "mutt -f =perso/INBOX"'
# Resurrect vim session (see https://github.com/tpope/vim-obsession)
#set -g @resurrect-strategy-vim 'session'

# Tmux resurect
#run-shell /home/baptiste/.tmux/plugins/tmux-resurrect/resurrect.tmux

new -s prezto -n mutt 'mutt -f "~/Mail/Gmail/INBOX"'
new-window -n mpc ncmpcpp
new-window -n notes 'vim +RecentNotes'
new-window -n local
select-window -t mutt
